-- #266 "define" pragma

terminator Stm ""                        ;

SInts.    Stm   ::= "integers"   Ints    ;
SChars.   Stm   ::= "chars"      Chars   ;
SExp.     Stm   ::= "expression" Exp     ;

EHalf.    Exp2  ::= "1/2"                ;
EDouble.  Exp2  ::= Double               ;
where.    Exp1  ::= "sqrt" Exp1          ; -- eSqrt
eSqrt4.   Exp1  ::= "sqrt4" Exp1         ;
EPower.   Exp   ::= Exp1 "**" Exp        ;

coercions Exp 2                          ;

define    where  e = EPower e EHalf      ;  -- eSqrt
define    eSqrt4 e = where (where e)     ;  -- eSqrt (eSqrt e) -- try to provoke clash with Haskell/Agda keyword

-- #285 "define" pragma involving token categories

INil.     Ints ::=                       ;
in.       Ints ::= Integer               ; -- iSg
ISnoc.    Ints ::= Ints "," Integer      ;

define    in let = ISnoc INil let        ; -- iSg -- try to provoke clash with Haskell/Agda keyword

CNil.     Chars ::=                      ;
cSg.      Chars ::= Char                 ;
CSnoc.    Chars ::= Chars Dot Char       ;

define    cSg c = CSnoc CNil (Dot ".") c ;

token     Dot '.'                        ;
