-- Comments.
comment "//";
comment "'" "'";

Entry. Ent ::= [Several];

-- Token carrying position (is it really necessary, since in antlr everything has a position available?).
--position token PIdent letter (letter|digit|'_'|'\'')*;
token PIPPO 'a' 'b' '*';

-- entrypoints is useless with ANTLR, any production can be an entrypoint



{-gapag: I think this just means that a constructor/object corresponding to this definition is created
but the parser and lexers do not know it, e.g. this object cannot be parsed.
-}
-- introduces a type-annotated variant of a variable expression.
internal EVarT. Exp ::= "(" Ident ":" Type ")";
NonInternal . Exp ::= "(" Ident PIPPO ":" Type ")";

-- Controls the delimiters of a list, allowing to express its separator/terminator.
-- The default is:
-- delimiters Several "" "" <here comes the rest>;
-- Beware that a list of a certain category cannot have terminator and separator at once!
-- It would result in problems. If you define delimiters without terminator/separator
-- and define terminator/separator later, you get warnings about overlapping cases
-- delimiters Several "delLeft" "delRight" terminator "@" nonempty;
separator Several ",";


-- should create several labels for category Several
rules Several ::= "!!" Exp |  ">!<" Exp;

-- coercions. Note that parentheses are implied here
-- coercions Exp 3;

Type1 . Type ::= "in\\" Char;
Type2 . Type ::= "dfds" Double Integer Ident;
AnyExp . Exp ::= "exp" String;

-- TODO:
{-
-- no idea of what it does. probably legacy stuff
   define Definition [Exp] = Ident;
-- Layout rules. Can be delayed, or one might follow the suggestion in the LBNF report
-}