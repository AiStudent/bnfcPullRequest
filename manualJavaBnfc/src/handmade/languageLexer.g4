// This Antlr4 file was machine-generated by the BNF converter
lexer grammar languageLexer;
// Predefined regular expressions in BNFC
LETTER  : CAPITAL | SMALL;
CAPITAL : [A-Z\u00C0-\u00D6\u00D8-\u00DE];
SMALL   : [a-z\u00DF-\u00F6\u00F8-\u00FF];
DIGIT   : [0-9];
Surrogate_id_SYMB_0 : '(' ;
Surrogate_id_SYMB_1 : ':' ;
Surrogate_id_SYMB_2 : ')' ;
Surrogate_id_SYMB_3 : ',' ;
Surrogate_id_SYMB_4 : '!!' ;
Surrogate_id_SYMB_5 : '>!<' ;
Surrogate_id_SYMB_6 : 'in\\' ;
Surrogate_id_SYMB_7 : 'dfds' ;
Surrogate_id_SYMB_8 : 'exp' ;
COMMENT: '//' ~[\r\n]* (('\r'? '\n')|EOF) -> skip ;
MULTICOMMENT : '\'' (.)*? '\'' -> skip;

PIPPO : 'a''b''*';
// String token type
STRING : '"' -> more, mode(STRINGMODE);
CHAR : '\''   -> more, mode(CHARMODE);
// Double predefined token type
DOUBLE : DIGIT+ '.' DIGIT+ ('e' '-'? DIGIT+)?;
//Integer predefined token type
INTEGER : DIGIT+;
// Identifier token type
fragment
IDENTIFIER_FIRST : LETTER | '_';
IDENT : IDENTIFIER_FIRST (IDENTIFIER_FIRST | DIGIT)*;
// Whitespace
WS : (' ' | '\r' | '\t' | '\n')+ ->  skip;
// Escapable sequences
fragment
Escapable : ('"' | '\\' | 'n' | 't' | 'r');
mode STRESCAPE;
STRESCAPED : Escapable  -> more, popMode ;
mode STRINGMODE;
STRINGESC : '\\' -> more , pushMode(STRESCAPE);
STRINGEND : '"' ->  type(STRING), mode(DEFAULT_MODE);
STRINGTEXT : ~[\"\\] -> more;
mode CHARMODE;
CHARANY     :  ~[\'\\] -> more, mode(CHAREND);
CHARESC     :  '\\'  -> more, pushMode(CHAREND),pushMode(ESCAPE);
mode ESCAPE;
ESCAPED : (Escapable | '\'')  -> more, popMode ;
mode CHAREND;
CHARENDC     :  '\''  -> type(CHAR), mode(DEFAULT_MODE);